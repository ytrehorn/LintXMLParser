<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 3.2.0-alpha01">

    <issue
        id="GradleCompatible"
        severity="Fatal"
        message="The compileSdkVersion (24) should not be lower than the targetSdkVersion (25)"
        category="Correctness"
        priority="8"
        summary="Incompatible Gradle Versions"
        explanation="There are some combinations of libraries, or tools and libraries, that are incompatible, or can lead to bugs. One such incompatibility is compiling with a version of the Android support libraries that is not the latest version (or in particular, a version lower than your `targetSdkVersion`)."
        errorLine1="  compileSdkVersion 24"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/build.gradle"
            line="20"
            column="3"/>
    </issue>

    <issue
        id="GradleCompatible"
        severity="Fatal"
        message="This support library should not use a different version (25) than the `compileSdkVersion` (24)"
        category="Correctness"
        priority="8"
        summary="Incompatible Gradle Versions"
        explanation="There are some combinations of libraries, or tools and libraries, that are incompatible, or can lead to bugs. One such incompatibility is compiling with a version of the Android support libraries that is not the latest version (or in particular, a version lower than your `targetSdkVersion`)."
        errorLine1="  compile &apos;com.android.support:support-v4:25.0.1&apos;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/build.gradle"
            line="41"
            column="3"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="   editor.commit();"
        errorLine2="   ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/EditDevice.java"
            line="536"
            column="4"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="      editor.commit();"
        errorLine2="      ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/PackagesChooser.java"
            line="279"
            column="7"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="  editor.commit();"
        errorLine2="  ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/Preferences.java"
            line="42"
            column="3"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="                editor.commit();"
        errorLine2="                ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="752"
            column="17"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="                editor.commit();"
        errorLine2="                ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="771"
            column="17"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="                editor.commit();"
        errorLine2="                ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="790"
            column="17"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="                editor.commit();"
        errorLine2="                ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="809"
            column="17"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="                editor.commit();"
        errorLine2="                ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="828"
            column="17"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="1226"
            column="9"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1039"
            column="9"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1051"
            column="9"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="  mFilterText = mEtFilter.getText().toString().toLowerCase();"
        errorLine2="                                               ~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/AppChooser.java"
            line="88"
            column="48"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="    if (appInfo.getAppName().toLowerCase().contains(mFilterText)) {"
        errorLine2="                             ~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/AppChooser.java"
            line="97"
            column="30"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="  String lcase = data.toLowerCase();"
        errorLine2="                      ~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/CustomIntentMaker.java"
            line="133"
            column="23"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 15): `android.app.Notification#EXTRA_TEXT_LINES`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="                        CharSequence[] lines = bun.getCharSequenceArray(Notification.EXTRA_TEXT_LINES);"
        errorLine2="                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="166"
            column="73"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 15): `android.app.Notification#EXTRA_TEXT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="                            text = bun.getString(Notification.EXTRA_TEXT).toString();"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="181"
            column="50"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 16 (current min is 15): `android.app.Notification#PRIORITY_MIN`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="                    .setPriority(Notification.PRIORITY_MIN).build();"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="243"
            column="34"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 16 (current min is 15): `android.app.Notification#PRIORITY_MIN`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="                    .setPriority(Notification.PRIORITY_MIN).build();"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1100"
            column="34"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 16 (current min is 15): `android.app.Notification#PRIORITY_MIN`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="                        .setPriority(Notification.PRIORITY_MIN).build();"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1116"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 18 (current min is 15): android.service.notification.NotificationListenerService"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="public class NotificationCatcher extends NotificationListenerService {"
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="34"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 15): new android.service.notification.NotificationListenerService"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super();"
        errorLine2="        ~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="44"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 15): android.service.notification.StatusBarNotification#getPackageName"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (p.equalsIgnoreCase(sbn.getPackageName())) test = true;"
        errorLine2="                                           ~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="103"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 15): android.service.notification.StatusBarNotification#getPackageName"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                String pack = sbn.getPackageName();"
        errorLine2="                                  ~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="110"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 15): android.service.notification.StatusBarNotification#getNotification"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                Notification notification = sbn.getNotification();"
        errorLine2="                                                ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="122"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 15): android.service.notification.StatusBarNotification#getNotification"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    ticker = sbn.getNotification().tickerText.toString();"
        errorLine2="                                 ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="152"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 19 (current min is 15): `android.app.Notification#extras`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    Bundle bun = notification.extras;"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="164"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 16 (current min is 15): android.app.Notification.Builder#build"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .setPriority(Notification.PRIORITY_MIN).build();"
        errorLine2="                                                            ~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="243"
            column="61"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 16 (current min is 15): android.app.Notification.Builder#setPriority"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .setPriority(Notification.PRIORITY_MIN).build();"
        errorLine2="                     ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="243"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 16 (current min is 15): android.app.Notification.Builder#build"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        .setPriority(Notification.PRIORITY_MIN).build();"
        errorLine2="                                                                ~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1116"
            column="65"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 16 (current min is 15): android.app.Notification.Builder#setPriority"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        .setPriority(Notification.PRIORITY_MIN).build();"
        errorLine2="                         ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1116"
            column="26"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the `android.os.Build.VERSION_CODES` javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        android:targetSdkVersion=&quot;23&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/AndroidManifest.xml"
            line="37"
            column="9"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility &#xA;modes apply. Consider testing and updating this version. &#xA;Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="    targetSdkVersion 25"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/build.gradle"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="PrivateApi"
        severity="Warning"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        category="Correctness"
        priority="6"
        summary="Using Private APIs"
        explanation="Using reflection to access hidden/private Android APIs is not safe; it will often not work on \&#xA;devices from other vendors, and it may suddenly stop working (if the API is removed) or crash \&#xA;spectacularly (if the API behavior changes, since there are no guarantees for compatibility)."
        errorLine1="            Class&lt;?> c2 = Class.forName(&quot;android.os.ServiceManager&quot;);"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="1554"
            column="27"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `parentActivityName` is only used in API level 16 and higher (current min is 15)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="            android:label=&quot;@string/title_activity_packages_chooser&quot; android:parentActivityName=&quot;a2dp.Vol.main&quot;>"
        errorLine2="                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/AndroidManifest.xml"
            line="120"
            column="69"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="Old buildToolsVersion 25.0.0; recommended version is 25.0.2 or later"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="  buildToolsVersion &apos;25.0.0&apos;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/build.gradle"
            line="21"
            column="3"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `minSdkVersion` value (`19`) is not used; it is always overridden by the value specified in the Gradle build script (`15`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="        android:minSdkVersion=&quot;19&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/AndroidManifest.xml"
            line="36"
            column="9"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `targetSdkVersion` value (`23`) is not used; it is always overridden by the value specified in the Gradle build script (`25`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="        android:targetSdkVersion=&quot;23&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/AndroidManifest.xml"
            line="37"
            column="9"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFF&quot; android:padding=&quot;5dip&quot; android:textSize=&quot;22dip&quot; android:text=&quot;Action:&quot; android:width=&quot;100dip&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                                                                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="5"
            column="251"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="   &lt;/View>&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFF&quot; android:padding=&quot;5dip&quot; android:textSize=&quot;22dip&quot; android:text=&quot;Data:&quot; android:width=&quot;100dip&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                                                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="8"
            column="261"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="   &lt;/View>&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFF&quot; android:padding=&quot;5dip&quot; android:textSize=&quot;22dip&quot; android:text=&quot;Type:&quot; android:width=&quot;100dip&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                                                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="11"
            column="261"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="&lt;TextView android:id=&quot;@+id/pi_tv_name&quot; android:layout_height=&quot;fill_parent&quot; android:gravity=&quot;center_vertical&quot; android:textColor=&quot;#fff&quot; android:textStyle=&quot;bold&quot; android:textSize=&quot;18dip&quot; android:scrollHorizontally=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/package_list_item.xml"
            line="6"
            column="160"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="&lt;TextView android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;fill_parent&quot; android:id=&quot;@+id/psi_tv_station_name&quot; android:textColor=&quot;#FFF&quot; android:textSize=&quot;20dip&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/pandora_station_item.xml"
            line="5"
            column="146"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="          android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;20dip&quot; android:layout_gravity=&quot;center&quot; android:textColor=&quot;#FFF&quot; android:textSize=&quot;18dip&quot;/>"
        errorLine2="                                                                                                                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/pandora_station_list.xml"
            line="8"
            column="171"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="Repeated word &quot;der&quot; in message: possible typo"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="    &lt;string name=&quot;PrefsGPSTimeout&quot;>Gibt die maximale Zeit an, in der der GPS-Listener versucht, die Positionsbestimmung nach einer Bluetooth-Verbindungstrennung zu verbessern.&lt;/string>"
        errorLine2="                                                                 ^"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-de/strings.xml"
            line="54"
            column="66"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="Repeated word &quot;der&quot; in message: possible typo"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="    &lt;string name=&quot;PrefsGPSInaccuracy&quot;>Gibt die maximale GPS-Ungenauigkeit an, an der der GPS-Listener aufhört zu versuchen, die Positionsbestimmung zu verbessern.&lt;/string>"
        errorLine2="                                                                                 ^"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-de/strings.xml"
            line="56"
            column="82"/>
    </issue>

    <issue
        id="StickyBroadcast"
        severity="Warning"
        message="The usage of sticky broadcasts is discouraged due to its weak security. Replace usages of sticky broadcasts with alternatives and remove this permission"
        category="Security"
        priority="6"
        summary="SM05: Sticky Broadcast | The usage of sticky broadcasts is discouraged"
        explanation="Sticky broadcasts offer no security as anyone can access and modify them. Note that they are also deprecated as of API Level 21. The recommended pattern is to use a non-sticky broadcast to report  that something has changed, with another mechanism for apps  to retrieve the current value whenever desired, e.g., an explicit intent (see the provided link)."
        url="https://developer.android.com/reference/android/content/Context.html"
        urls="https://developer.android.com/reference/android/content/Context.html"
        errorLine1="    &lt;uses-permission android:name=&quot;android.permission.BROADCAST_STICKY&quot; />"
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/AndroidManifest.xml"
            line="40"
            column="22"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 31, Package: a2dp.Vol, Surrounding Method: onCreate, Class: ALauncher.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="   startActivity(intent);"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ALauncher.java"
            line="32"
            column="4"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 111, Package: a2dp.Vol, Surrounding Method: onItemClick, Class: AppChooser.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="   setResult(RESULT_OK, i);"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/AppChooser.java"
            line="112"
            column="4"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 54, Package: a2dp.Vol, Surrounding Method: onClick, Class: CustomIntentMaker.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="   setResult(RESULT_OK, i);"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/CustomIntentMaker.java"
            line="55"
            column="4"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 546, Package: a2dp.Vol, Surrounding Method: Save, Class: EditDevice.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="   application.sendBroadcast(itent);"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/EditDevice.java"
            line="547"
            column="4"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 46, Package: a2dp.Vol, Surrounding Method: finish, Class: ManageData.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="        this.setResult(Activity.RESULT_OK, i);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="47"
            column="9"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 59, Package: a2dp.Vol, Surrounding Method: onDestroy, Class: ManageData.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="        this.setResult(Activity.RESULT_OK, i);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="60"
            column="9"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 461, Package: a2dp.Vol, Surrounding Method: onPostExecute, Class: ManageData.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                application.sendBroadcast(itent);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="462"
            column="17"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 212, Package: a2dp.Vol, Surrounding Method: doInBackground, Class: NotificationCatcher.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                    application.sendBroadcast(intent);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="213"
            column="21"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 281, Package: a2dp.Vol, Surrounding Method: cleanup, Class: PackagesChooser.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="      application.sendBroadcast(intent);"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/PackagesChooser.java"
            line="282"
            column="7"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 52, Package: a2dp.Vol, Surrounding Method: onDestroy, Class: Preferences.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="  this.application.sendBroadcast(i);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/Preferences.java"
            line="53"
            column="3"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 199, Package: a2dp.Vol, Surrounding Method: onListItemClick, Class: ProviderList.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="  setResult(RESULT_OK, rtrIntent);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ProviderList.java"
            line="200"
            column="3"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 171, Package: a2dp.Vol, Surrounding Method: onOptionsItemSelected, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(st)));"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="172"
            column="17"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 295, Package: a2dp.Vol, Surrounding Method: onCreate, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                    startActivityForResult(checkIntent, CHECK_TTS);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="296"
            column="21"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 474, Package: a2dp.Vol, Surrounding Method: onLongClick, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(st)));"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="475"
            column="21"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 923, Package: a2dp.Vol, Surrounding Method: Locationbtn, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="            startActivity(i);"
        errorLine2="            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="924"
            column="13"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1051, Package: a2dp.Vol, Surrounding Method: getBtDevices, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                    startActivityForResult(enableBluetooth, ENABLE_BLUETOOTH);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="1052"
            column="21"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1158, Package: a2dp.Vol, Surrounding Method: onActivityResult, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                    startActivityForResult(checkIntent, CHECK_TTS);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="1159"
            column="21"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1188, Package: a2dp.Vol, Surrounding Method: onClick, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                                        startActivityForResult(installIntent,"
        errorLine2="                                        ^">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="1188"
            column="41"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1341, Package: a2dp.Vol, Surrounding Method: onReceive, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                    startActivityForResult(checkIntent, CHECK_TTS);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="1342"
            column="21"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1355, Package: a2dp.Vol, Surrounding Method: onReceive, Class: main.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                    startActivity(intent);"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="1356"
            column="21"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 260, Package: a2dp.Vol, Surrounding Method: onCreate, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="        application.sendBroadcast(i);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="261"
            column="9"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 375, Package: a2dp.Vol, Surrounding Method: onDestroy, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="        application.sendBroadcast(i);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="376"
            column="9"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 469, Package: a2dp.Vol, Surrounding Method: onReceive, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                application.sendBroadcast(itent);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="470"
            column="17"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 662, Package: a2dp.Vol, Surrounding Method: DoConnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="        application.sendBroadcast(itent);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="663"
            column="9"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 665, Package: a2dp.Vol, Surrounding Method: DoConnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="        application.sendBroadcast(new Intent(&quot;a2dp.Vol.Clear&quot;));"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="666"
            column="9"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 779, Package: a2dp.Vol, Surrounding Method: DoDisconnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                sendBroadcast(i);"
        errorLine2="                ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="780"
            column="17"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 785, Package: a2dp.Vol, Surrounding Method: DoDisconnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                    sendBroadcast(j);"
        errorLine2="                    ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="786"
            column="21"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 806, Package: a2dp.Vol, Surrounding Method: DoDisconnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                startActivity(startMain);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="807"
            column="17"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 819, Package: a2dp.Vol, Surrounding Method: onFinish, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                            sendBroadcast(i);"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="820"
            column="29"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 826, Package: a2dp.Vol, Surrounding Method: onFinish, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                                sendBroadcast(j);"
        errorLine2="                                ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="827"
            column="33"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 859, Package: a2dp.Vol, Surrounding Method: onTick, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                            sendBroadcast(i);"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="860"
            column="29"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 978, Package: a2dp.Vol, Surrounding Method: DoDisconnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="        application.sendBroadcast(itent);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="979"
            column="9"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1393, Package: a2dp.Vol, Surrounding Method: TextReader, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                        sendBroadcast(i);"
        errorLine2="                        ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1394"
            column="25"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1486, Package: a2dp.Vol, Surrounding Method: onDone, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                            application.sendBroadcast(c);"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1487"
            column="29"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1499, Package: a2dp.Vol, Surrounding Method: onDone, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                            application.sendBroadcast(c);"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1500"
            column="29"/>
    </issue>

    <issue
        id="UnauthorizedIntent"
        severity="Warning"
        message="Avoid sending implicit intents if possible -- Line: 1672, Package: a2dp.Vol, Surrounding Method: onFinish, Class: service.java"
        category="Security"
        priority="6"
        summary="SM04: Unauthorized Intent | Avoid sending implicit intents if possible"
        explanation="Intents can be either implicit or explicit. An intent is implicit as long as the receiver is not completely specified. The receiver can be specified within the intent constructor or later via setClass(), setClassName() or setComponentName() Sending implicit intents is problematic. Any app can register itself to receive any implicit intent. Therefore sensitive information in implicit intents is not protected from leaking  to any other app. Always use explicit intents if the receiver is known and do not store sensitive information in implicit intents. Use LocalBroadcastManager for communication within your application if possible. You can also specifiy a permission within your send call that the receiver has to acquire first in order to get access to your intent."
        url="https://developer.android.com/training/articles/security-tips.html#IPC"
        urls="https://developer.android.com/training/articles/security-tips.html#IPC"
        errorLine1="                            sendBroadcast(i);"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1673"
            column="29"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 53, Package: a2dp.Vol, Surrounding Method: onCreate, Class: NotificationCatcher.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="        this.registerReceiver(reloadprefs, reloadmessage);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="54"
            column="9"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 55, Package: a2dp.Vol, Surrounding Method: onCreate, Class: NotificationCatcher.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="        this.registerReceiver(clear, clearFilter);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="56"
            column="9"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 241, Package: a2dp.Vol, Surrounding Method: onCreate, Class: main.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="            this.registerReceiver(sRunning, filter3);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="242"
            column="13"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 250, Package: a2dp.Vol, Surrounding Method: onCreate, Class: main.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="            this.registerReceiver(sRunning, filter4);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="251"
            column="13"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 259, Package: a2dp.Vol, Surrounding Method: onCreate, Class: main.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="        this.registerReceiver(mReceiver5, filter5);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="260"
            column="9"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 262, Package: a2dp.Vol, Surrounding Method: onCreate, Class: main.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="        this.registerReceiver(mReceiver6, filter6);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="263"
            column="9"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 295, Package: a2dp.Vol, Surrounding Method: registerRecievers, Class: service.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="        this.registerReceiver(btOFFReciever, btNotEnabled);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="296"
            column="9"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 298, Package: a2dp.Vol, Surrounding Method: registerRecievers, Class: service.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="        this.registerReceiver(messageClear, clearMessage);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="299"
            column="9"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 327, Package: a2dp.Vol, Surrounding Method: registerRecievers, Class: service.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="            this.registerReceiver(headSetReceiver, filter7);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="328"
            column="13"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 329, Package: a2dp.Vol, Surrounding Method: registerRecievers, Class: service.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="        this.registerReceiver(mReceiver, filter);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="330"
            column="9"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 330, Package: a2dp.Vol, Surrounding Method: registerRecievers, Class: service.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="        this.registerReceiver(mReceiver2, filter2);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="331"
            column="9"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 647, Package: a2dp.Vol, Surrounding Method: DoConnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="            application.registerReceiver(tmessage, messageFilter);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="648"
            column="13"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 650, Package: a2dp.Vol, Surrounding Method: DoConnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="            this.registerReceiver(sco_change, sco_filter);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="651"
            column="13"/>
    </issue>

    <issue
        id="UnprotectedBroadcastReceiver"
        severity="Warning"
        message="Missing grant revokings can leave an app vulnerable to intent spoofing -- Line: 655, Package: a2dp.Vol, Surrounding Method: DoConnected, Class: service.java"
        category="Security"
        priority="6"
        summary="SM10: Unprotected Broadcast Receiver | A broadcast receiver is dynamically registered without any permission"
        explanation="Broadcast receivers registered via registerReceiver() without any permission argument are available to all other apps, so every app can receive these intents. This fosters intent spoofing: A malicious app could craft an intent to call a broadcaster&apos;s onReceive method with arbitrary data.&#xA; Consider using &quot;registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)&quot; and set broadcastPermission to something different than null. Alternatively, if the broadcast receiver is only intended to be used within an app, consider using LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead."
        errorLine1="            application.registerReceiver(SMScatcher, new IntentFilter("
        errorLine2="            ^">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="655"
            column="13"/>
    </issue>

    <issue
        id="UnsafeProtectedBroadcastReceiver"
        severity="Warning"
        message="This broadcast receiver declares an intent-filter for a protected broadcast action string, which can only be sent by the system, not third-party applications. However, the receiver&apos;s onReceive method does not appear to call getAction to ensure that the received Intent&apos;s action string matches the expected value, potentially making it possible for another actor to send a spoofed intent with no action string or a different action string and cause undesired behavior."
        category="Security"
        priority="6"
        summary="Unsafe Protected BroadcastReceiver"
        explanation="BroadcastReceivers that declare an intent-filter for a protected-broadcast action string must check that the received intent&apos;s action string matches the expected value, otherwise it is possible for malicious actors to spoof intents."
        errorLine1=" public void onReceive(Context context, Intent arg1) {"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/Starter.java"
            line="18"
            column="14"/>
    </issue>

    <issue
        id="CommonTaskAffinity"
        severity="Warning"
        message="SM12: Common Task Affinity | Consider setting the task affinity of your app explicitly to an empty value"
        category="Security"
        priority="5"
        summary="SM12: Common Task Affinity | Consider setting the task affinity of your app explicitly to an empty value"
        explanation="The application&apos;s task affinity should be set to an empty value, because any other application could set its task affinity to any specific value. Non-empty task affinity values allow malicious apps to start various kinds of phishing and denial of service attacks. With an empty task affinity the app will get a unique task affinity at run time,  that is not shared with other apps. This makes it impossible for other apps to attach."
        url="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-ren-chuangang.pdf"
        urls="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-ren-chuangang.pdf,https://bitbucket.org/secure-it-i/android-app-vulnerability-benchmarks/wiki/Using%20Task%20Affinity%20to%20launch%20Denial-of-service%20or%20Phishing%20attacks%20in%20Android"
        errorLine1="    &lt;application"
        errorLine2="    ^">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/AndroidManifest.xml"
            line="43"
            column="5"/>
    </issue>

    <issue
        id="WorldReadableFiles"
        severity="Warning"
        message="Using `MODE_WORLD_READABLE` when creating files can be risky, review carefully"
        category="Security"
        priority="4"
        summary="`openFileOutput()` or similar call passing `MODE_WORLD_READABLE`"
        explanation="There are cases where it is appropriate for an application to write world readable files, but these should be reviewed carefully to ensure that they contain no private data that is leaked to other applications."
        errorLine1="                        Context.MODE_WORLD_READABLE);"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/StoreLoc.java"
            line="327"
            column="33"/>
    </issue>

    <issue
        id="WorldReadableFiles"
        severity="Warning"
        message="Using `MODE_WORLD_READABLE` when creating files can be risky, review carefully"
        category="Security"
        priority="4"
        summary="`openFileOutput()` or similar call passing `MODE_WORLD_READABLE`"
        explanation="There are cases where it is appropriate for an application to write world readable files, but these should be reviewed carefully to ensure that they contain no private data that is leaked to other applications."
        errorLine1="                        Context.MODE_WORLD_READABLE);"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/StoreLoc.java"
            line="362"
            column="33"/>
    </issue>

    <issue
        id="WorldReadableFiles"
        severity="Warning"
        message="Using `MODE_WORLD_READABLE` when creating files can be risky, review carefully"
        category="Security"
        priority="4"
        summary="`openFileOutput()` or similar call passing `MODE_WORLD_READABLE`"
        explanation="There are cases where it is appropriate for an application to write world readable files, but these should be reviewed carefully to ensure that they contain no private data that is leaked to other applications."
        errorLine1="                            Context.MODE_WORLD_READABLE);"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/StoreLoc.java"
            line="570"
            column="37"/>
    </issue>

    <issue
        id="AllowBackup"
        severity="Warning"
        message="On SDK version 23 and up, your app data will be automatically backed up and restored on app install. Consider adding the attribute `android:fullBackupContent` to specify an `@xml` resource which configures which files to backup. More info: https://developer.android.com/training/backup/autosyncapi.html"
        category="Security"
        priority="3"
        summary="AllowBackup/FullBackupContent Problems"
        explanation="The `allowBackup` attribute determines if an application&apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup&#xA;&#xA;By default, this flag is set to `true`. When this flag is set to `true`, application data can be backed up and restored by the user using `adb backup` and `adb restore`.&#xA;&#xA;This may have security consequences for an application. `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.&#xA;&#xA;Setting `allowBackup=&quot;false&quot;` opts an application out of both backup and restore.&#xA;&#xA;To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&quot;`.&#xA;&#xA;If not set to false, and if targeting API 23 or later, lint will also warn that you should set `android:fullBackupContent` to configure auto backup."
        url="https://developer.android.com/training/backup/autosyncapi.html"
        urls="https://developer.android.com/training/backup/autosyncapi.html,http://developer.android.com/reference/android/R.attr.html#allowBackup"
        errorLine1="    &lt;application"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/AndroidManifest.xml"
            line="43"
            column="5"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1=" private static Context context;"
        errorLine2="         ~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/DeviceDB.java"
            line="27"
            column="10"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This AsyncTask class should be static or leaks might occur (a2dp.Vol.ManageData.ExportDatabaseFileTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class ExportDatabaseFileTask extends"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="269"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This AsyncTask class should be static or leaks might occur (a2dp.Vol.ManageData.ExportDataAsXmlTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class ExportDataAsXmlTask extends AsyncTask&lt;String, Void, String> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="334"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This AsyncTask class should be static or leaks might occur (a2dp.Vol.ManageData.SelectDataTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class SelectDataTask extends AsyncTask&lt;String, Void, String> {"
        errorLine2="                  ~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="377"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This AsyncTask class should be static or leaks might occur (a2dp.Vol.ManageData.ImportDatabaseFileTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class ImportDatabaseFileTask extends"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="409"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This AsyncTask class should be static or leaks might occur (a2dp.Vol.ManageData.ExportLocationTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class ExportLocationTask extends AsyncTask&lt;String, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="490"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This AsyncTask class should be static or leaks might occur (a2dp.Vol.NotificationCatcher.Readit)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class Readit extends AsyncTask&lt;StatusBarNotification, Integer, Long> {"
        errorLine2="                  ~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/NotificationCatcher.java"
            line="84"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    static Button serv;"
        errorLine2="    ~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/main.java"
            line="64"
            column="5"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).&#xA;&#xA;If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.&#xA;&#xA;There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="&lt;LinearLayout"
        errorLine2="^">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/app_list_item.xml"
            line="2"
            column="1"/>
    </issue>

    <issue
        id="ViewHolder"
        severity="Warning"
        message="Unconditional layout inflation from view adapter: Should use View Holder pattern (use recycled view passed into this method as the second parameter) for smoother scrolling"
        category="Performance"
        priority="5"
        summary="View Holder Candidates"
        explanation="When implementing a view Adapter, you should avoid unconditionally inflating a new layout; if an available item is passed in for reuse, you should try to use that one instead. This helps make for example ListView scrolling much smoother."
        url="http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder"
        urls="http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder"
        errorLine1="   View v = inflater.inflate(R.layout.app_list_item , parent, false);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/AppChooser.java"
            line="220"
            column="13"/>
    </issue>

    <issue
        id="ViewHolder"
        severity="Warning"
        message="Unconditional layout inflation from view adapter: Should use View Holder pattern (use recycled view passed into this method as the second parameter) for smoother scrolling"
        category="Performance"
        priority="5"
        summary="View Holder Candidates"
        explanation="When implementing a view Adapter, you should avoid unconditionally inflating a new layout; if an available item is passed in for reuse, you should try to use that one instead. This helps make for example ListView scrolling much smoother."
        url="http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder"
        urls="http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder"
        errorLine1="    View v = inflater.inflate(R.layout.package_list_item , parent, false);"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/PackagesChooser.java"
            line="152"
            column="14"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Long.valueOf(preferences.getString(&quot;gpsTime&quot;, &quot;15000&quot;))` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="            Long yyy = new Long(preferences.getString(&quot;gpsTime&quot;, &quot;15000&quot;));"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/StoreLoc.java"
            line="88"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Float.valueOf(preferences.getString(&quot;gpsDistance&quot;, &quot;10&quot;))` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="            Float xxx = new Float(preferences.getString(&quot;gpsDistance&quot;, &quot;10&quot;));"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/StoreLoc.java"
            line="91"
            column="25"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_width` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="&lt;TextView android:id=&quot;@+id/pi_tv_name&quot; android:layout_height=&quot;fill_parent&quot; android:gravity=&quot;center_vertical&quot; android:textColor=&quot;#fff&quot; android:textStyle=&quot;bold&quot; android:textSize=&quot;18sp&quot; android:scrollHorizontally=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/app_list_item.xml"
            line="6"
            column="218"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_width` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_action&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="6"
            column="11"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_width` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_data&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="9"
            column="11"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_width` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_type&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="12"
            column="11"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_width` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="&lt;TextView android:id=&quot;@+id/pi_tv_name&quot; android:layout_height=&quot;fill_parent&quot; android:gravity=&quot;center_vertical&quot; android:textColor=&quot;#fff&quot; android:textStyle=&quot;bold&quot; android:textSize=&quot;18dip&quot; android:scrollHorizontally=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/package_list_item.xml"
            line="6"
            column="219"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.xml.accessconfig` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="&lt;accessibility-service xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/xml/accessconfig.xml"
            line="2"
            column="1"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.mipmap.car` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-hdpi/car.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-mdpi/car.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xhdpi/car.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xxhdpi/car.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xxxhdpi/car.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.mipmap.ic_launcher` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-hdpi/ic_launcher.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-mdpi/ic_launcher.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xhdpi/ic_launcher.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xxhdpi/ic_launcher.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.mipmap.jack` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-hdpi/jack.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-mdpi/jack.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xhdpi/jack.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xxhdpi/jack.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/mipmap-xxxhdpi/jack.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.PrefsNotifySummaryON` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;PrefsNotifySummaryON&quot;>The service will start as a foreground task with an icon on the notification bar.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-da/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-de/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-el/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-fr/strings.xml"
            line="93"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-ja/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-ru/strings.xml"
            line="50"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.PrefsNotifySummaryOFF` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;PrefsNotifySummaryOFF&quot;>The service will start but it will be a background task with no icon on the notification bar.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values/strings.xml"
            line="51"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-da/strings.xml"
            line="51"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-de/strings.xml"
            line="51"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-el/strings.xml"
            line="51"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-fr/strings.xml"
            line="82"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-ja/strings.xml"
            line="51"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-ru/strings.xml"
            line="51"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.enableGPS` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;enableGPS&quot;>Enable GPS while connected?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values/strings.xml"
            line="142"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-da/strings.xml"
            line="142"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-de/strings.xml"
            line="142"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-el/strings.xml"
            line="142"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-fr/strings.xml"
            line="141"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-ja/strings.xml"
            line="142"
            column="13"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-ru/strings.xml"
            line="142"
            column="13"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Ellipsis string can be replaced with ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (…, &amp;#8230;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Ellipsis"
        urls="http://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="    &lt;string name=&quot;msgTemplate&quot;>... Μήνυμα απο: {0} .. {1}&lt;/string>"
        errorLine2="                               ^"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/values-el/strings.xml"
            line="121"
            column="32"/>
    </issue>

    <issue
        id="IconColors"
        severity="Warning"
        message="Notification icons must be entirely white"
        category="Usability:Icons"
        priority="6"
        summary="Icon colors do not follow the recommended visual style"
        explanation="Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: `ic_menu_` for action bar icons, `ic_stat_` for notification icons etc. These correspond to the naming conventions documented in http://developer.android.com/guide/practices/ui_guidelines/icon_design.html"
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/drawable-hdpi/ic_launcher.png"/>
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/service.java"
            line="1114"
            column="39"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/car2.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/drawable/car2.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/headset.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/drawable/headset.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/icon5.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/drawable/icon5.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/jack.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/drawable/jack.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/usb.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/drawable/usb.png"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src/main/res`: drawable-xxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.&#xA;&#xA;Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res"/>
    </issue>

    <issue
        id="ButtonOrder"
        severity="Warning"
        message="OK button should be on the right (was &quot;OK | Test | Cancel&quot;, should be &quot;Cancel | Test | OK&quot;)"
        category="Usability"
        priority="8"
        summary="Button order"
        explanation="According to the Android Design Guide,&#xA;&#xA;&quot;Action buttons are typically Cancel and/or OK, with OK indicating the preferred or most likely action. However, if the options consist of specific actions such as Close or Wait rather than a confirmation or cancellation of the action described in the content, then all the buttons should be active verbs. As a rule, the dismissive action of a dialog is always on the left whereas the affirmative actions are on the right.&quot;&#xA;&#xA;This check looks for button bars and buttons which look like cancel buttons, and makes sure that these are on the left."
        url="http://developer.android.com/design/building-blocks/dialogs.html"
        urls="http://developer.android.com/design/building-blocks/dialogs.html"
        errorLine1="   &lt;/View>&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:background=&quot;#CCC&quot; android:layout_width=&quot;fill_parent&quot; android:orientation=&quot;horizontal&quot; android:gravity=&quot;center&quot;>&lt;Button android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;100dip&quot; android:text=&quot;@string/OK&quot; android:id=&quot;@+id/ci_btn_ok&quot; android:layout_margin=&quot;5dip&quot;>&lt;/Button>"
        errorLine2="                                                                                                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="14"
            column="181"/>
    </issue>

    <issue
        id="ButtonOrder"
        severity="Warning"
        message="Cancel button should be on the left (was &quot;@string/OK | Test | Cancel&quot;, should be &quot;Cancel | Test | @string/OK&quot;)"
        category="Usability"
        priority="8"
        summary="Button order"
        explanation="According to the Android Design Guide,&#xA;&#xA;&quot;Action buttons are typically Cancel and/or OK, with OK indicating the preferred or most likely action. However, if the options consist of specific actions such as Close or Wait rather than a confirmation or cancellation of the action described in the content, then all the buttons should be active verbs. As a rule, the dismissive action of a dialog is always on the left whereas the affirmative actions are on the right.&quot;&#xA;&#xA;This check looks for button bars and buttons which look like cancel buttons, and makes sure that these are on the left."
        url="http://developer.android.com/design/building-blocks/dialogs.html"
        urls="http://developer.android.com/design/building-blocks/dialogs.html"
        errorLine1="&lt;Button android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;5dip&quot; android:id=&quot;@+id/ci_btn_test&quot; android:text=&quot;Test&quot; android:layout_width=&quot;wrap_content&quot;>&lt;/Button>&lt;Button android:layout_height=&quot;wrap_content&quot; android:text=&quot;Cancel&quot; android:layout_margin=&quot;5dip&quot; android:id=&quot;@+id/ci_btn_cancel&quot; android:layout_width=&quot;100dip&quot;>&lt;/Button>"
        errorLine2="                                                                                                                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="15"
            column="170"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="   &lt;/View>&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:background=&quot;#CCC&quot; android:layout_width=&quot;fill_parent&quot; android:orientation=&quot;horizontal&quot; android:gravity=&quot;center&quot;>&lt;Button android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;100dip&quot; android:text=&quot;@string/OK&quot; android:id=&quot;@+id/ci_btn_ok&quot; android:layout_margin=&quot;5dip&quot;>&lt;/Button>"
        errorLine2="                                                                                                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="14"
            column="181"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="&lt;Button android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;5dip&quot; android:id=&quot;@+id/ci_btn_test&quot; android:text=&quot;Test&quot; android:layout_width=&quot;wrap_content&quot;>&lt;/Button>&lt;Button android:layout_height=&quot;wrap_content&quot; android:text=&quot;Cancel&quot; android:layout_margin=&quot;5dip&quot; android:id=&quot;@+id/ci_btn_cancel&quot; android:layout_width=&quot;100dip&quot;>&lt;/Button>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="15"
            column="1"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="                &lt;Button"
        errorLine2="                ^">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="235"
            column="17"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="                &lt;Button"
        errorLine2="                ^">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="244"
            column="17"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1="&lt;/TableRow>&lt;TableRow android:id=&quot;@+id/TableRow02&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;10dp&quot; android:layout_width=&quot;fill_parent&quot; android:layout_gravity=&quot;center_horizontal|center&quot; android:gravity=&quot;center_horizontal&quot;>&lt;Button android:id=&quot;@+id/Locationbtn&quot; android:text=&quot;@string/GetLocButtonString&quot; android:layout_gravity=&quot;left&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>&lt;Button android:id=&quot;@+id/Button01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:clickable=&quot;true&quot;  android:saveEnabled=&quot;true&quot; android:scrollbarAlwaysDrawHorizontalTrack=&quot;true&quot; android:visibility=&quot;visible&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;@string/FindDevices&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/ServButton&quot; android:layout_gravity=&quot;right&quot; android:freezesText=&quot;false&quot; android:text=&quot;@string/StartService&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>"
        errorLine2="                                                                                                                                                                                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/main.xml"
            line="7"
            column="238"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1=" &lt;TableRow android:id=&quot;@+id/TableRow03&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;fill_parent&quot; android:layout_margin=&quot;5dp&quot;>&lt;Button android:id=&quot;@+id/exportdbtosdbutton&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/ExportDB&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;bottom|left|fill_vertical&quot;/>&lt;Button android:id=&quot;@+id/exportdbxmltosdbutton&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/ExportXML&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;bottom|fill_vertical|center&quot;/>"
        errorLine2="                                                                                                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/managedata.xml"
            line="18"
            column="141"/>
    </issue>

    <issue
        id="ButtonStyle"
        severity="Warning"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        category="Usability"
        priority="5"
        summary="Button should be borderless"
        explanation="Button bars typically use a borderless style for the buttons. Set the `style=&quot;?android:attr/buttonBarButtonStyle&quot;` attribute on each of the buttons, and set `style=&quot;?android:attr/buttonBarStyle&quot;` on the parent layout"
        url="http://developer.android.com/design/building-blocks/buttons.html"
        urls="http://developer.android.com/design/building-blocks/buttons.html"
        errorLine1=" &lt;TableRow android:id=&quot;@+id/TableRow04&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;fill_parent&quot;>&lt;Button android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/ImportDBButton&quot; android:text=&quot;@string/ImportDB&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;left|fill_vertical&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/ExportLocation&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ExportLoc&quot; android:layout_gravity=&quot;right|fill_vertical&quot;>&lt;/Button>&lt;/TableRow>&lt;TableRow android:id=&quot;@+id/TableRow01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/Path&quot; android:text=&quot;Path will show here after export&quot; android:textStyle=&quot;bold&quot;>&lt;/TextView>&lt;/TableRow>"
        errorLine2="                                                                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/managedata.xml"
            line="23"
            column="113"/>
    </issue>

    <issue
        id="GoogleAppIndexingWarning"
        severity="Warning"
        message="App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent filter. See issue explanation for more details."
        category="Usability"
        priority="5"
        summary="Missing support for Firebase App Indexing"
        explanation="Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search."
        url="https://g.co/AppIndexing/AndroidStudio"
        urls="https://g.co/AppIndexing/AndroidStudio"
        errorLine1="    &lt;application"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/AndroidManifest.xml"
            line="43"
            column="5"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType`"
        category="Usability"
        priority="5"
        summary="Missing `inputType`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). &#xA;&#xA;The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.&#xA;&#xA;If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_action&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="6"
            column="1"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType`"
        category="Usability"
        priority="5"
        summary="Missing `inputType`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). &#xA;&#xA;The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.&#xA;&#xA;If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_data&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="9"
            column="1"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType`"
        category="Usability"
        priority="5"
        summary="Missing `inputType`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). &#xA;&#xA;The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.&#xA;&#xA;If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_type&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="12"
            column="1"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType`"
        category="Usability"
        priority="5"
        summary="Missing `inputType`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). &#xA;&#xA;The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.&#xA;&#xA;If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="            &lt;EditText"
        errorLine2="            ^"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="&lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/pi_iv_icon&quot; android:layout_margin=&quot;5dip&quot; android:adjustViewBounds=&quot;true&quot; android:maxHeight=&quot;40dip&quot; android:maxWidth=&quot;40dip&quot; android:minHeight=&quot;40dip&quot; android:minWidth=&quot;40dip&quot;>&lt;/ImageView>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/app_list_item.xml"
            line="5"
            column="1"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="&lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/pi_iv_icon&quot; android:layout_margin=&quot;5dip&quot; android:adjustViewBounds=&quot;true&quot; android:maxHeight=&quot;40dip&quot; android:maxWidth=&quot;40dip&quot; android:minHeight=&quot;40dip&quot; android:minWidth=&quot;40dip&quot;>&lt;/ImageView>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/package_list_item.xml"
            line="5"
            column="1"/>
    </issue>

    <issue
        id="KeyboardInaccessibleWidget"
        severity="Warning"
        message="&apos;clickable&apos; attribute found, please also add &apos;focusable&apos;"
        category="Accessibility"
        priority="3"
        summary="Keyboard inaccessible widget"
        explanation="A widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the `focusable` attribute as well."
        errorLine1="&lt;/TableRow>&lt;TableRow android:id=&quot;@+id/TableRow02&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;10dp&quot; android:layout_width=&quot;fill_parent&quot; android:layout_gravity=&quot;center_horizontal|center&quot; android:gravity=&quot;center_horizontal&quot;>&lt;Button android:id=&quot;@+id/Locationbtn&quot; android:text=&quot;@string/GetLocButtonString&quot; android:layout_gravity=&quot;left&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>&lt;Button android:id=&quot;@+id/Button01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:clickable=&quot;true&quot;  android:saveEnabled=&quot;true&quot; android:scrollbarAlwaysDrawHorizontalTrack=&quot;true&quot; android:visibility=&quot;visible&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;@string/FindDevices&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/ServButton&quot; android:layout_gravity=&quot;right&quot; android:freezesText=&quot;false&quot; android:text=&quot;@string/StartService&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>"
        errorLine~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/main.xml"
            line="7"
            column="564"/>
    </issue>

    <issue
        id="KeyboardInaccessibleWidget"
        severity="Warning"
        message="&apos;clickable&apos; attribute found, please also add &apos;focusable&apos;"
        category="Accessibility"
        priority="3"
        summary="Keyboard inaccessible widget"
        explanation="A widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the `focusable` attribute as well."
        errorLine1="&lt;ListView android:id=&quot;@+id/ListView01&quot; android:layout_height=&quot;wrap_content&quot; android:clickable=&quot;true&quot; android:contentDescription=&quot;@string/ListName&quot; android:layout_width=&quot;fill_parent&quot;>&lt;/ListView>"
        errorLine2="                                                                            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/main.xml"
            line="15"
            column="77"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: where minSdk &lt; 17, you should provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;EditText android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/m_et_search&quot; android:maxLines=&quot;1&quot; android:layout_width=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:layout_margin=&quot;5dip&quot; android:imeActionLabel=&quot;Search&quot; android:imeOptions=&quot;normal&quot; android:inputType=&quot;text&quot;>&lt;/EditText>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/m_btn_search&quot; android:text=&quot;Search&quot; android:layout_marginRight=&quot;3dip&quot; android:layout_gravity=&quot;center_vertical&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginRight=&quot;3dip&quot; android:layout_gravity=&quot;center_vertical&quot; android:id=&quot;@+id/m_btn_clear&quot; android:text=&quot;Clear&quot;>&lt;/Button>"
        errorLine2="                                                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/app_list.xml"
            line="8"
            column="120"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: where minSdk &lt; 17, you should provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_action&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="6"
            column="1"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: where minSdk &lt; 17, you should provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_data&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="9"
            column="1"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: where minSdk &lt; 17, you should provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="&lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ci_et_type&quot; android:maxLines=&quot;1&quot;>&lt;/EditText>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="12"
            column="1"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: where minSdk &lt; 17, you should provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="            &lt;EditText"
        errorLine2="            ^"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: where minSdk &lt; 17, you should provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="            &lt;EditText android:id=&quot;@+id/editApp&quot; android:text=&quot;EditText&quot; android:layout_width=&quot;match_parent&quot; android:layout_marginBottom=&quot;5pt&quot; android:layout_height=&quot;wrap_content&quot; android:inputType=&quot;none&quot;>&lt;/EditText>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="145"
            column="13"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: where minSdk &lt; 17, you should provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="            &lt;EditText android:id=&quot;@+id/editBtConnect&quot; android:text=&quot;EditText&quot; android:layout_width=&quot;match_parent&quot; android:layout_marginBottom=&quot;5pt&quot; android:inputType=&quot;none&quot; android:layout_height=&quot;wrap_content&quot;>&lt;/EditText>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="167"
            column="13"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  fsmsdelaybox.setText(device.smsdelay + &quot;s&quot;);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/EditDevice.java"
            line="206"
            column="24"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  fvoldelaybox.setText(device.voldelay + &quot;s&quot;);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/EditDevice.java"
            line="210"
            column="24"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="   fsmsdelaybox.setText(progress + &quot;s&quot;);"
        errorLine2="                        ~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/EditDevice.java"
            line="451"
            column="25"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="   fvoldelaybox.setText(progress + &quot;s&quot;);"
        errorLine2="                        ~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/EditDevice.java"
            line="470"
            column="25"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  sb.setText(&quot;Saving&quot;);"
        errorLine2="             ~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/EditDevice.java"
            line="539"
            column="14"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="    fapp.setText(&quot;Custom&quot;);"
        errorLine2="                 ~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/EditDevice.java"
            line="712"
            column="18"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Exported to: &quot; + pathstr);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="311"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Exported to: &quot; + pathstr);"
        errorLine2="                                             ~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="311"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Export Failed&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="315"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Exported to: &quot; + pathstr);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="368"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Exported to: &quot; + pathstr);"
        errorLine2="                                             ~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="368"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Export Failed&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="372"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Imported from: &quot; + pathstr);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="454"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Imported from: &quot; + pathstr);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="454"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Import Failed&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="469"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Exported to: &quot; + pathstr);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="529"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Exported to: &quot; + pathstr);"
        errorLine2="                                             ~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="529"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="http://developer.android.com/guide/topics/resources/localization.html"
        urls="http://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                ManageData.this.path.setText(&quot;Export Failed&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/java/a2dp/Vol/ManageData.java"
            line="537"
            column="46"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Clear&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;EditText android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/m_et_search&quot; android:maxLines=&quot;1&quot; android:layout_width=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:layout_margin=&quot;5dip&quot; android:imeActionLabel=&quot;Search&quot; android:imeOptions=&quot;normal&quot; android:inputType=&quot;text&quot;>&lt;/EditText>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/m_btn_search&quot; android:text=&quot;Search&quot; android:layout_marginRight=&quot;3dip&quot; android:layout_gravity=&quot;center_vertical&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginRight=&quot;3dip&quot; android:layout_gravity=&quot;center_vertical&quot; android:id=&quot;@+id/m_btn_clear&quot; android:text=&quot;Clear&quot;>&lt;/Button>"
        errorLine~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/app_list.xml"
            line="8"
            column="800"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Search&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;EditText android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/m_et_search&quot; android:maxLines=&quot;1&quot; android:layout_width=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:layout_margin=&quot;5dip&quot; android:imeActionLabel=&quot;Search&quot; android:imeOptions=&quot;normal&quot; android:inputType=&quot;text&quot;>&lt;/EditText>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/m_btn_search&quot; android:text=&quot;Search&quot; android:layout_marginRight=&quot;3dip&quot; android:layout_gravity=&quot;center_vertical&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginRight=&quot;3dip&quot; android:layout_gravity=&quot;center_vertical&quot; android:id=&quot;@+id/m_btn_clear&quot; android:text=&quot;Clear&quot;>&lt;/Button>"
        errorLine~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/app_list.xml"
            line="8"
            column="508"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Action:&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFF&quot; android:padding=&quot;5dip&quot; android:textSize=&quot;22dip&quot; android:text=&quot;Action:&quot; android:width=&quot;100dip&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                                                                                                                                                   ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="5"
            column="276"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Data:&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   &lt;/View>&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFF&quot; android:padding=&quot;5dip&quot; android:textSize=&quot;22dip&quot; android:text=&quot;Data:&quot; android:width=&quot;100dip&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                                                                                                                                                             ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="8"
            column="286"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Type:&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   &lt;/View>&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textColor=&quot;#FFF&quot; android:padding=&quot;5dip&quot; android:textSize=&quot;22dip&quot; android:text=&quot;Type:&quot; android:width=&quot;100dip&quot;>&lt;/TextView>"
        errorLine2="                                                                                                                                                                                                                                                                                             ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="11"
            column="286"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Cancel&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="&lt;Button android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;5dip&quot; android:id=&quot;@+id/ci_btn_test&quot; android:text=&quot;Test&quot; android:layout_width=&quot;wrap_content&quot;>&lt;/Button>&lt;Button android:layout_height=&quot;wrap_content&quot; android:text=&quot;Cancel&quot; android:layout_margin=&quot;5dip&quot; android:id=&quot;@+id/ci_btn_cancel&quot; android:layout_width=&quot;100dip&quot;>&lt;/Button>"
        errorLine2="                                                                                                                                                                                                                      ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="15"
            column="215"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Test&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="&lt;Button android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;5dip&quot; android:id=&quot;@+id/ci_btn_test&quot; android:text=&quot;Test&quot; android:layout_width=&quot;wrap_content&quot;>&lt;/Button>&lt;Button android:layout_height=&quot;wrap_content&quot; android:text=&quot;Cancel&quot; android:layout_margin=&quot;5dip&quot; android:id=&quot;@+id/ci_btn_cancel&quot; android:layout_width=&quot;100dip&quot;>&lt;/Button>"
        errorLine2="                                                                                                        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/custom_intent.xml"
            line="15"
            column="105"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;10s&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                    android:text=&quot;10s&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="40"
            column="21"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;10s&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                    android:text=&quot;10s&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="129"
            column="21"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;EditText&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            &lt;EditText android:id=&quot;@+id/editApp&quot; android:text=&quot;EditText&quot; android:layout_width=&quot;match_parent&quot; android:layout_marginBottom=&quot;5pt&quot; android:layout_height=&quot;wrap_content&quot; android:inputType=&quot;none&quot;>&lt;/EditText>"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="145"
            column="49"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;EditText&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            &lt;EditText android:id=&quot;@+id/editBtConnect&quot; android:text=&quot;EditText&quot; android:layout_width=&quot;match_parent&quot; android:layout_marginBottom=&quot;5pt&quot; android:inputType=&quot;none&quot; android:layout_height=&quot;wrap_content&quot;>&lt;/EditText>"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="167"
            column="55"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Path will show here after export&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1=" &lt;TableRow android:id=&quot;@+id/TableRow04&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;fill_parent&quot;>&lt;Button android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/ImportDBButton&quot; android:text=&quot;@string/ImportDB&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;left|fill_vertical&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/ExportLocation&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ExportLoc&quot; android:layout_gravity=&quot;right|fill_vertical&quot;>&lt;/Button>&lt;/TableRow>&lt;TableRow android:id=&quot;@+id/TableRow01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/Path&quot; android:text=&quot;Path will show here after export&quot; android:textStyle=&quot;bold&quot;>&lt;/TextView>&lt;/TableRow>"
        errorLine~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/managedata.xml"
            line="23"
            column="794"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/activity_packages_chooser.xml"
            line="15"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/activity_packages_chooser.xml"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;3dip&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="&lt;LinearLayout android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;fill_parent&quot;>&lt;EditText android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/m_et_search&quot; android:maxLines=&quot;1&quot; android:layout_width=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:layout_margin=&quot;5dip&quot; android:imeActionLabel=&quot;Search&quot; android:imeOptions=&quot;normal&quot; android:inputType=&quot;text&quot;>&lt;/EditText>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/m_btn_search&quot; android:text=&quot;Search&quot; android:layout_marginRight=&quot;3dip&quot; android:layout_gravity=&quot;center_vertical&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginRight=&quot;3dip&quot; android:layout_gravity=&quot;center_vertical&quot; android:id=&quot;@+id/m_btn_clear&quot; android:text=&quot;Clear&quot;>&lt;/Button>"
        errorLine~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/app_list.xml"
            line="8"
            column="530"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;5pt&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_marginRight=&quot;5pt&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="38"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginStart=&quot;5pt&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_marginLeft=&quot;5pt&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="47"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;15pt&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_marginRight=&quot;15pt&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="48"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;5pt&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_marginRight=&quot;5pt&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="127"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginStart=&quot;5pt&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_marginLeft=&quot;5pt&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="136"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;15pt&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_marginRight=&quot;15pt&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="137"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_gravity=&quot;left&quot;"
        errorLine2="                                            ~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="187"
            column="45"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:drawableEnd=&quot;@drawable/car2&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:drawableRight=&quot;@drawable/car2&quot; />"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="191"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_gravity=&quot;right|center_horizontal&quot;"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="197"
            column="45"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:drawableEnd=&quot;@drawable/headset&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:drawableRight=&quot;@drawable/headset&quot; />"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="200"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_gravity=&quot;left&quot;"
        errorLine2="                                            ~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="206"
            column="45"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:drawableEnd=&quot;@drawable/jack&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:drawableRight=&quot;@drawable/jack&quot; />"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="209"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_gravity=&quot;right|center_horizontal&quot;"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="215"
            column="45"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:drawableEnd=&quot;@drawable/usb&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:drawableRight=&quot;@drawable/usb&quot; />"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="218"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:layout_gravity=&quot;left&quot;"
        errorLine2="                                            ~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="224"
            column="45"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:drawableEnd=&quot;@drawable/icon5&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:drawableRight=&quot;@drawable/icon5&quot; />"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/edit_item.xml"
            line="227"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="&lt;/TableRow>&lt;TableRow android:id=&quot;@+id/TableRow02&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;10dp&quot; android:layout_width=&quot;fill_parent&quot; android:layout_gravity=&quot;center_horizontal|center&quot; android:gravity=&quot;center_horizontal&quot;>&lt;Button android:id=&quot;@+id/Locationbtn&quot; android:text=&quot;@string/GetLocButtonString&quot; android:layout_gravity=&quot;left&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>&lt;Button android:id=&quot;@+id/Button01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:clickable=&quot;true&quot;  android:saveEnabled=&quot;true&quot; android:scrollbarAlwaysDrawHorizontalTrack=&quot;true&quot; android:visibility=&quot;visible&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;@string/FindDevices&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/ServButton&quot; android:layout_gravity=&quot;right&quot; android:freezesText=&quot;false&quot; android:text=&quot;@string/StartService&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>"
        errorLine~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/main.xml"
            line="7"
            column="932"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="&lt;/TableRow>&lt;TableRow android:id=&quot;@+id/TableRow02&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;10dp&quot; android:layout_width=&quot;fill_parent&quot; android:layout_gravity=&quot;center_horizontal|center&quot; android:gravity=&quot;center_horizontal&quot;>&lt;Button android:id=&quot;@+id/Locationbtn&quot; android:text=&quot;@string/GetLocButtonString&quot; android:layout_gravity=&quot;left&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>&lt;Button android:id=&quot;@+id/Button01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:clickable=&quot;true&quot;  android:saveEnabled=&quot;true&quot; android:scrollbarAlwaysDrawHorizontalTrack=&quot;true&quot; android:visibility=&quot;visible&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;@string/FindDevices&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/ServButton&quot; android:layout_gravity=&quot;right&quot; android:freezesText=&quot;false&quot; android:text=&quot;@string/StartService&quot; android:layout_weight=&quot;1&quot;>&lt;/Button>"
        errorLine2="                                                                                                                                                                                                                                                                                                                                                     ~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/main.xml"
            line="7"
            column="342"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1=" &lt;TableRow android:id=&quot;@+id/TableRow03&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;fill_parent&quot; android:layout_margin=&quot;5dp&quot;>&lt;Button android:id=&quot;@+id/exportdbtosdbutton&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/ExportDB&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;bottom|left|fill_vertical&quot;/>&lt;Button android:id=&quot;@+id/exportdbxmltosdbutton&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/ExportXML&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;bottom|fill_vertical|center&quot;/>"
        errorLine2="                                                                                                                                                                                                                                                                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/managedata.xml"
            line="18"
            column="341"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1=" &lt;TableRow android:id=&quot;@+id/TableRow04&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;fill_parent&quot;>&lt;Button android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/ImportDBButton&quot; android:text=&quot;@string/ImportDB&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;left|fill_vertical&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/ExportLocation&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ExportLoc&quot; android:layout_gravity=&quot;right|fill_vertical&quot;>&lt;/Button>&lt;/TableRow>&lt;TableRow android:id=&quot;@+id/TableRow01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/Path&quot; android:text=&quot;Path will show here after export&quot; android:textStyle=&quot;bold&quot;>&lt;/TextView>&lt;/TableRow>"
        errorLine~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/managedata.xml"
            line="23"
            column="535"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1=" &lt;TableRow android:id=&quot;@+id/TableRow04&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;fill_parent&quot;>&lt;Button android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/ImportDBButton&quot; android:text=&quot;@string/ImportDB&quot; android:layout_width=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;left|fill_vertical&quot;>&lt;/Button>&lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/ExportLocation&quot; android:layout_weight=&quot;1&quot; android:id=&quot;@+id/ExportLoc&quot; android:layout_gravity=&quot;right|fill_vertical&quot;>&lt;/Button>&lt;/TableRow>&lt;TableRow android:id=&quot;@+id/TableRow01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;>&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/Path&quot; android:text=&quot;Path will show here after export&quot; android:textStyle=&quot;bold&quot;>&lt;/TextView>&lt;/TableRow>"
        errorLine2="                                                                                                                                                                                                                                                                                                                    ~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/astridytrehorn/Desktop/Apps 2/a2dp.Vol_137_src.tar.gz/app/src/main/res/layout/managedata.xml"
            line="23"
            column="309"/>
    </issue>

</issues>
